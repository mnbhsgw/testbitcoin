{"ast":null,"code":"var _jsxFileName = \"/Users/manabu/Downloads/btc-arbitrage-webapp_claudecode/client/src/PriceChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\nconst PriceChart = ({\n  prices,\n  ws\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const [timeRange, setTimeRange] = useState(24);\n  const [realtimeData, setRealtimeData] = useState({});\n  const chartRef = useRef();\n  const exchangeColors = {\n    'bitFlyer': '#ff6b6b',\n    'Coincheck': '#4ecdc4',\n    'Zaif': '#45b7d1',\n    'GMOコイン': '#96ceb4',\n    'bitbank': '#ffeaa7'\n  };\n  const fetchPriceHistory = async () => {\n    try {\n      const response = await axios.get(`/api/price-history?hours=${timeRange}`);\n      const priceHistory = response.data.priceHistory;\n\n      // データを取引所ごとにグループ化\n      const groupedData = {};\n      priceHistory.forEach(record => {\n        if (!groupedData[record.exchange]) {\n          groupedData[record.exchange] = [];\n        }\n        groupedData[record.exchange].push({\n          x: new Date(record.timestamp),\n          y: record.price\n        });\n      });\n\n      // Chart.js用のデータセットを作成\n      const datasets = Object.keys(groupedData).map(exchange => ({\n        label: exchange,\n        data: groupedData[exchange],\n        borderColor: exchangeColors[exchange] || '#666',\n        backgroundColor: exchangeColors[exchange] || '#666',\n        borderWidth: 2,\n        fill: false,\n        tension: 0.1,\n        pointRadius: 1,\n        pointHoverRadius: 4\n      }));\n      setChartData({\n        datasets\n      });\n    } catch (error) {\n      console.error('Error fetching price history:', error);\n    }\n  };\n\n  // リアルタイムデータでチャートを更新\n  const updateChartWithRealtime = newPrices => {\n    if (!newPrices || newPrices.length === 0) return;\n    const now = new Date();\n    const newRealtimeData = {\n      ...realtimeData\n    };\n    newPrices.forEach(price => {\n      if (!newRealtimeData[price.exchange]) {\n        newRealtimeData[price.exchange] = [];\n      }\n\n      // 最新のデータポイントを追加\n      newRealtimeData[price.exchange].push({\n        x: now,\n        y: price.price\n      });\n\n      // 古いデータを削除（直近1時間分のみ保持）\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n      newRealtimeData[price.exchange] = newRealtimeData[price.exchange].filter(point => point.x > oneHourAgo);\n    });\n    setRealtimeData(newRealtimeData);\n\n    // 現在のチャートデータにリアルタイムデータを追加\n    setChartData(prevData => {\n      const updatedDatasets = prevData.datasets.map(dataset => {\n        const exchangeName = dataset.label;\n        const realtimePoints = newRealtimeData[exchangeName] || [];\n\n        // 既存のデータと新しいリアルタイムデータを結合\n        const allData = [...dataset.data];\n        realtimePoints.forEach(point => {\n          // 重複を避けるため、同じ時刻のデータは更新\n          const existingIndex = allData.findIndex(p => Math.abs(p.x.getTime() - point.x.getTime()) < 5000 // 5秒以内なら同じとみなす\n          );\n          if (existingIndex >= 0) {\n            allData[existingIndex] = point;\n          } else {\n            allData.push(point);\n          }\n        });\n\n        // 時刻順にソート\n        allData.sort((a, b) => a.x.getTime() - b.x.getTime());\n        return {\n          ...dataset,\n          data: allData\n        };\n      });\n      return {\n        datasets: updatedDatasets\n      };\n    });\n  };\n\n  // WebSocketでリアルタイム更新を受信\n  useEffect(() => {\n    if (prices && prices.length > 0) {\n      updateChartWithRealtime(prices);\n    }\n  }, [prices]);\n  useEffect(() => {\n    fetchPriceHistory();\n    const interval = setInterval(fetchPriceHistory, 30000); // 30秒ごとに更新\n    return () => clearInterval(interval);\n  }, [timeRange]);\n  const calculateTimeRange = () => {\n    const now = new Date();\n    const startTime = new Date(now.getTime() - timeRange * 60 * 60 * 1000);\n    return {\n      min: startTime,\n      max: now\n    };\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: `BTC/JPY 価格推移 (過去${timeRange}時間)`\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: ¥${context.parsed.y.toLocaleString()}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          displayFormats: {\n            hour: 'HH:mm',\n            minute: 'HH:mm'\n          }\n        },\n        title: {\n          display: true,\n          text: '時刻'\n        },\n        min: calculateTimeRange().min,\n        max: calculateTimeRange().max\n      },\n      y: {\n        title: {\n          display: true,\n          text: '価格 (JPY)'\n        },\n        ticks: {\n          callback: function (value) {\n            return '¥' + value.toLocaleString();\n          }\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"price-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"timeRange\",\n          children: \"\\u8868\\u793A\\u671F\\u9593: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"timeRange\",\n          value: timeRange,\n          onChange: e => setTimeRange(parseInt(e.target.value)),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 0.5,\n            children: \"30\\u5206\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 1,\n            children: \"1\\u6642\\u9593\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 2,\n            children: \"2\\u6642\\u9593\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 6,\n            children: \"6\\u6642\\u9593\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 12,\n            children: \"12\\u6642\\u9593\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 24,\n            children: \"24\\u6642\\u9593\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 72,\n            children: \"3\\u65E5\\u9593\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 168,\n            children: \"1\\u9031\\u9593\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `http://localhost:3001/api/export-csv?hours=${timeRange}`,\n          download: true,\n          className: \"export-button\",\n          children: \"\\uD83D\\uDCCA CSV\\u51FA\\u529B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        ref: chartRef,\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(PriceChart, \"9GkBWmmymfNUry0Aq26w5cy7bwA=\");\n_c = PriceChart;\nexport default PriceChart;\nvar _c;\n$RefreshReg$(_c, \"PriceChart\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","Line","axios","jsxDEV","_jsxDEV","register","PriceChart","prices","ws","_s","chartData","setChartData","datasets","timeRange","setTimeRange","realtimeData","setRealtimeData","chartRef","exchangeColors","fetchPriceHistory","response","get","priceHistory","data","groupedData","forEach","record","exchange","push","x","Date","timestamp","y","price","Object","keys","map","label","borderColor","backgroundColor","borderWidth","fill","tension","pointRadius","pointHoverRadius","error","console","updateChartWithRealtime","newPrices","length","now","newRealtimeData","oneHourAgo","getTime","filter","point","prevData","updatedDatasets","dataset","exchangeName","realtimePoints","allData","existingIndex","findIndex","p","Math","abs","sort","a","b","interval","setInterval","clearInterval","calculateTimeRange","startTime","min","max","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","tooltip","mode","intersect","callbacks","context","parsed","toLocaleString","scales","type","time","displayFormats","hour","minute","ticks","callback","value","interaction","axis","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","e","parseInt","target","href","download","ref","_c","$RefreshReg$"],"sources":["/Users/manabu/Downloads/btc-arbitrage-webapp_claudecode/client/src/PriceChart.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport axios from 'axios';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale\n);\n\nconst PriceChart = ({ prices, ws }) => {\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const [timeRange, setTimeRange] = useState(24);\n  const [realtimeData, setRealtimeData] = useState({});\n  const chartRef = useRef();\n\n  const exchangeColors = {\n    'bitFlyer': '#ff6b6b',\n    'Coincheck': '#4ecdc4', \n    'Zaif': '#45b7d1',\n    'GMOコイン': '#96ceb4',\n    'bitbank': '#ffeaa7'\n  };\n\n  const fetchPriceHistory = async () => {\n    try {\n      const response = await axios.get(`/api/price-history?hours=${timeRange}`);\n      const priceHistory = response.data.priceHistory;\n      \n      // データを取引所ごとにグループ化\n      const groupedData = {};\n      priceHistory.forEach(record => {\n        if (!groupedData[record.exchange]) {\n          groupedData[record.exchange] = [];\n        }\n        groupedData[record.exchange].push({\n          x: new Date(record.timestamp),\n          y: record.price\n        });\n      });\n\n      // Chart.js用のデータセットを作成\n      const datasets = Object.keys(groupedData).map(exchange => ({\n        label: exchange,\n        data: groupedData[exchange],\n        borderColor: exchangeColors[exchange] || '#666',\n        backgroundColor: exchangeColors[exchange] || '#666',\n        borderWidth: 2,\n        fill: false,\n        tension: 0.1,\n        pointRadius: 1,\n        pointHoverRadius: 4\n      }));\n\n      setChartData({ datasets });\n    } catch (error) {\n      console.error('Error fetching price history:', error);\n    }\n  };\n\n  // リアルタイムデータでチャートを更新\n  const updateChartWithRealtime = (newPrices) => {\n    if (!newPrices || newPrices.length === 0) return;\n    \n    const now = new Date();\n    const newRealtimeData = { ...realtimeData };\n    \n    newPrices.forEach(price => {\n      if (!newRealtimeData[price.exchange]) {\n        newRealtimeData[price.exchange] = [];\n      }\n      \n      // 最新のデータポイントを追加\n      newRealtimeData[price.exchange].push({\n        x: now,\n        y: price.price\n      });\n      \n      // 古いデータを削除（直近1時間分のみ保持）\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n      newRealtimeData[price.exchange] = newRealtimeData[price.exchange]\n        .filter(point => point.x > oneHourAgo);\n    });\n    \n    setRealtimeData(newRealtimeData);\n    \n    // 現在のチャートデータにリアルタイムデータを追加\n    setChartData(prevData => {\n      const updatedDatasets = prevData.datasets.map(dataset => {\n        const exchangeName = dataset.label;\n        const realtimePoints = newRealtimeData[exchangeName] || [];\n        \n        // 既存のデータと新しいリアルタイムデータを結合\n        const allData = [...dataset.data];\n        realtimePoints.forEach(point => {\n          // 重複を避けるため、同じ時刻のデータは更新\n          const existingIndex = allData.findIndex(p => \n            Math.abs(p.x.getTime() - point.x.getTime()) < 5000 // 5秒以内なら同じとみなす\n          );\n          if (existingIndex >= 0) {\n            allData[existingIndex] = point;\n          } else {\n            allData.push(point);\n          }\n        });\n        \n        // 時刻順にソート\n        allData.sort((a, b) => a.x.getTime() - b.x.getTime());\n        \n        return {\n          ...dataset,\n          data: allData\n        };\n      });\n      \n      return { datasets: updatedDatasets };\n    });\n  };\n\n  // WebSocketでリアルタイム更新を受信\n  useEffect(() => {\n    if (prices && prices.length > 0) {\n      updateChartWithRealtime(prices);\n    }\n  }, [prices]);\n\n  useEffect(() => {\n    fetchPriceHistory();\n    const interval = setInterval(fetchPriceHistory, 30000); // 30秒ごとに更新\n    return () => clearInterval(interval);\n  }, [timeRange]);\n\n  const calculateTimeRange = () => {\n    const now = new Date();\n    const startTime = new Date(now.getTime() - timeRange * 60 * 60 * 1000);\n    return { min: startTime, max: now };\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: `BTC/JPY 価格推移 (過去${timeRange}時間)`\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: ¥${context.parsed.y.toLocaleString()}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          displayFormats: {\n            hour: 'HH:mm',\n            minute: 'HH:mm'\n          }\n        },\n        title: {\n          display: true,\n          text: '時刻'\n        },\n        min: calculateTimeRange().min,\n        max: calculateTimeRange().max\n      },\n      y: {\n        title: {\n          display: true,\n          text: '価格 (JPY)'\n        },\n        ticks: {\n          callback: function(value) {\n            return '¥' + value.toLocaleString();\n          }\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  return (\n    <div className=\"price-chart\">\n      <div className=\"chart-controls\">\n        <div className=\"control-group\">\n          <label htmlFor=\"timeRange\">表示期間: </label>\n          <select \n            id=\"timeRange\"\n            value={timeRange} \n            onChange={(e) => setTimeRange(parseInt(e.target.value))}\n          >\n            <option value={0.5}>30分</option>\n            <option value={1}>1時間</option>\n            <option value={2}>2時間</option>\n            <option value={6}>6時間</option>\n            <option value={12}>12時間</option>\n            <option value={24}>24時間</option>\n            <option value={72}>3日間</option>\n            <option value={168}>1週間</option>\n          </select>\n        </div>\n        <div className=\"control-group\">\n          <a \n            href={`http://localhost:3001/api/export-csv?hours=${timeRange}`}\n            download\n            className=\"export-button\"\n          >\n            📊 CSV出力\n          </a>\n        </div>\n      </div>\n      <div className=\"chart-container\">\n        <Line ref={chartRef} data={chartData} options={options} />\n      </div>\n    </div>\n  );\n};\n\nexport default PriceChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}